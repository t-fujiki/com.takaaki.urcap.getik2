global getik2 = rpc_factory("xmlrpc", "http://127.0.0.1:56000/RPC2")

PI = 3.1415926

def set_ur_type(ur):
  getik2.set_ur_type(ur)
end

def set_tcp_pose(__p):
  __x = __p[0]
  __y = __p[1]
  __z = __p[2]
  __rx = __p[3]
  __ry = __p[4]
  __rz = __p[5]

  getik2.set_tcp_pose(__x, __y, __z, __rx, __ry, __rz)

end

def set_tcp_offset():
  __p = get_tcp_offset()

  __x = __p[0]
  __y = __p[1]
  __z = __p[2]
  __rx = __p[3]
  __ry = __p[4]
  __rz = __p[5]

  getik2.set_tcp_offset(__x, __y, __z, __rx, __ry, __rz)

end

def set_calibration_a(d1, d2, d3, d4, d5, d6):

  getik2.set_calibration_a(d1, d2, d3, d4, d5, d6)

end

def set_calibration_d(d1, d2, d3, d4, d5, d6):

  getik2.set_calibration_d(d1, d2, d3, d4, d5, d6)

end


def set_calibration_alpha(d1, d2, d3, d4, d5, d6):

  getik2.set_calibration_alpha(d1, d2, d3, d4, d5, d6)

end

def set_calibration_theta(d1, d2, d3, d4, d5, d6):

  getik2.set_calibration_theta(d1, d2, d3, d4, d5, d6)

end

def get_analysis_angle(n):
  __t = getik2.get_analysis_angle(n)

  __p = [__t[0], __t[1], __t[2], __t[3], __t[4], __t[5]]

  return __p
end

def get_analysis_angle_deg(n):
  __t = getik2.get_analysis_angle(n)

  __p = [r2d(__t[0]), r2d(__t[1]), r2d(__t[2]), r2d(__t[3]), r2d(__t[4]), r2d(__t[5])]

  return __p
end


def get_real_angle(n):
  __t = getik2.get_real_angle(n)

  __p = [__t[0], __t[1], __t[2], __t[3], __t[4], __t[5]]

  return __p
end

def get_real_angle_deg(n):
  __t = getik2.get_real_angle(n)

  __p = [r2d(__t[0]), r2d(__t[1]), r2d(__t[2]), r2d(__t[3]), r2d(__t[4]), r2d(__t[5])]

  return __p
end

def get_pattern(__p):
  return getik2.get_pattern(__p[0], __p[1], __p[2], __p[3], __p[4], __p[5])
end

def get_pose(__t):
  return getik2.get_pose(__t[0], __t[1], __t[2], __t[3], __t[4], __t[5])
end

#__p:target pose
#n:number of pattern
def get_inverse_kin2(__p, n):
  set_tcp_pose(__p)
  set_tcp_offset()
  __target = get_real_angle(n)
  __current = get_actual_joint_positions()

  i = 2
  while i <= 5:
    if (__target[i] - __current[i] > PI and __target[i] >= 0):
      __target[i] = __target[i] - 2 * PI

    elif (__target[i] - __current[i] > -PI and __target[i] < 0):
      __target[i] = __target[i] + 2 * PI
    end

    i = i + 1
  end

  return __target

end

def r2dA(__t):
  return [r2d(__t[0]), r2d(__t[1]), r2d(__t[2]), r2d(__t[3]), r2d(__t[4]), r2d(__t[5])]
end

